with "../third_party/portable_minimal_ada_rts/rts.gpr";

project hexiwear_watch is

   Executable_Prefix := "hexiwear_watch";
   Board := "hexiwear";
   RTOS := "hirtos";

   for Languages use ("Ada", "C");

   for Main use ("main.adb");

   for Runtime ("Ada") use RTS'Runtime ("Ada");

   for Target use RTS'Target;

   type MCU_Type is ("nxp_kinetis_k64f", "stm32f401", "stm32f479", "freedom_e310");

   MCU : MCU_Type := External ("MCU", "nxp_kinetis_k64f");

   C_MCU_Switches := ();
   case MCU is
      when "nxp_kinetis_k64f"  =>
	 C_MCU_Switches := ("-DK64F_MCU");
      when "stm32f401"  =>
	 C_MCU_Switches := ("-DSTM32F401_MCU");
      when "stm32f479"  =>
	 C_MCU_Switches := ("-DSTM32F479_MCU");
      when "freedom_e310"  =>
	 C_MCU_Switches := ("-DUSE_PLIC", "-DUSE_M_TIME");
   end case;

   RTOS_Base_Dir := "";
   RTOS_Port_Subdir := "";
   C_RTOS_Switches := ();
   RTOS_Src_Dirs := ();
   case RTOS is
      when "freertos" =>
         RTOS_Base_Dir := "../third_party/FreeRTOS";
         case RTS.CPU_Core is
            when "arm_cortex_m0+" =>
               RTOS_Port_Subdir := "GCC/ARM_CM0";
            when "arm_cortex_m4" =>
               RTOS_Port_Subdir := "GCC/ARM_CM4F";
            when "riscv32" =>
               RTOS_Port_Subdir := "GCC/RISC32V";
            when others =>
               null;
         end case;

         C_RTOS_Switches := ("-I" & RTOS_Base_Dir & "/include",
                             "-I" & RTOS_Base_Dir & "/portable/" & RTOS_Port_Subdir);
         RTOS_Src_Dirs := (RTOS_Base_Dir,
                           RTOS_Base_Dir & "/include",
                           RTOS_Base_Dir & "/include/private",
                           RTOS_Base_Dir & "/portable/" & RTOS_Port_Subdir);

       when "hirtos" =>
         RTOS_Base_Dir := "../HiRTOS";
         case RTS.CPU_Core is
            when "arm_cortex_m0+" =>
               RTOS_Port_Subdir := "ARM_CM0";
            when "arm_cortex_m4" =>
               RTOS_Port_Subdir := "ARM_CM4F";
            when "riscv32" =>
               RTOS_Port_Subdir := "RISC32V";
            when others =>
               null;
         end case;

         RTOS_Src_Dirs := (RTOS_Base_Dir);

      when others =>
	 null;
   end case;

   for Source_Dirs use (".",
                        "../building_blocks/portable",
                        "../building_blocks/board_specific/" & Board,
                        "../building_blocks/mcu_specific/" & MCU,
                        "../building_blocks/cpu_specific/" & RTS.CPU_Core,
                        "../building_blocks/arch_specific/" & RTS.CPU_Arch,
                        "../building_blocks/rtos_specific/" & RTOS,
                        --"../building_blocks/rtos_specific/" & RTOS & "/" & RTS.CPU_Arch,
                        "../drivers/portable",
                        "../drivers/board_specific/" & Board,
                        "../drivers/mcu_specific/" & MCU,
                        "../third_party",
                        "../third_party/SVD/" & MCU) &
			RTOS_Src_Dirs;

   for Object_Dir use "obj";

   for Exec_Dir  use ".";

   package Naming is
      for Spec_Suffix ("C") use ".h";
      for Body_Suffix ("C") use ".c";
   end Naming;

   package Compiler is
      for Default_Switches ("Ada") use
 	    RTS.Compiler.COMMON_FLAGS &
            ("-O0", "-g",
	     "-gnatwa", "-gnatQ", "-gnat12",
             -- "-fstack-check", --  Generate stack checking code (part of Ada)
             "-gnata",           --  Enable assertions            (part of Ada)
             "-gnato13",         --  Overflow checking            (part of Ada)
             "-gnatn",           --  Inline subprograms marked for inlining
             "-gnatf",                      --  Full, verbose error messages
             "-gnatwa",                     --  All optional warnings
             "-gnatVa",                     --  All validity checks
             -- "-gnaty3abcdefhiklmnoOprstux", --  Style checks
             -- "-gnatwe",                     --  Treat warnings as errors
	          "-gnatef",
             "-gnat2012");                     --  Use Ada 2012

      for Default_Switches ("C") use RTS.Compiler.COMMON_FLAGS &
                                     C_MCU_Switches &
                                     C_RTOS_Switches &
                                     ("-std=gnu11",
				      --"-ffreestanding",
				      "-I../../building_blocks/rtos_specific/" & RTOS,
				      "-I../../building_blocks/rtos_specific/" & RTOS & "/" & RTS.CPU_Arch,
                                      "-Wstrict-prototypes",
                                      "-fms-extensions",
                                      "-Wextra",
                                      "-Wformat",
                                      "-Wunreachable-code",
                                      "-Wshadow",
                                      "-Wmissing-prototypes",
                                      "-Wpointer-arith",
                                      "-Winline",
                                      "-Werror",
                                      "-Wstack-usage=224",
                                      "-Wundef",
                                      "-Wdouble-promotion",
	                              "-DDEBUG");

      for Local_Configuration_Pragmas use "../gnat_pragmas.adc";

   end Compiler;

   package Linker is
      for Default_Switches ("Ada") use RTS.Compiler.COMMON_FLAGS &
                                     ("-nostartfiles",
				      "-nostdlib",
				      "-nolibc",
				      "-Wl,-Map=" & Executable_Prefix & ".map",
				      "-Xlinker", "--gc-sections",
	                              "-T../../building_blocks/mcu_specific/" & MCU & "/memory_layout.ld");
   end Linker;

   package Builder is
      --for Executable ("main.adb") use Executable_Prefix & ".elf";
      for Executable ("main.adb") use Executable_Prefix & ".elf";
   end Builder;

   package Ide is
      for Program_Host use "localhost:4242";
      for Communication_Protocol use "remote";
   end Ide;

end hexiwear_watch;
